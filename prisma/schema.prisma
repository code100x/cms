generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id              Int             @id @default(autoincrement())
  appxCourseId    String
  discordRoleId   String
  title           String
  imageUrl        String
  description     String
  openToEveryone  Boolean         @default(false)
  slug            String
  discordOauthUrl String          @default("")
  content         CourseContent[]
  purchasedBy     UserPurchases[]
  certificate     Certificate[]
  certIssued      Boolean         @default(false)
}

model UserPurchases {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  assignedAt DateTime @default(now())

  @@id([userId, courseId])
}

model Content {
  id               Int             @id @default(autoincrement())
  type             String          @default("folder")
  title            String
  hidden           Boolean         @default(false)
  description      String?
  thumbnail        String?
  parentId         Int?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  videoProgress    VideoProgress[]
  children         Content[]       @relation("ContentToContent")
  courses          CourseContent[]
  createdAt        DateTime        @default(now())
  VideoMetadata    VideoMetadata?
  NotionMetadata   NotionMetadata?
  notionMetadataId Int?
  comments         Comment[]
  commentsCount    Int             @default(0)
  bookmark         Bookmark[]
}

model CourseContent {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  @@id([courseId, contentId])
}

model Certificate {
  id       String @id @default(cuid())
  slug     String @default("certId")
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@unique([userId, courseId])
}

model NotionMetadata {
  id        Int     @id @default(autoincrement())
  contentId Int
  content   Content @relation(fields: [contentId], references: [id])
  notionId  String

  @@unique([contentId])
}

model VideoMetadata {
  id                         Int             @id @default(autoincrement())
  contentId                  Int
  video_1080p_mp4_1          String?
  video_1080p_mp4_2          String?
  video_1080p_mp4_3          String?
  video_1080p_mp4_4          String?
  video_1080p_1              String?
  video_1080p_2              String?
  video_1080p_3              String?
  video_1080p_4              String?
  video_720p_mp4_1           String?
  video_720p_mp4_2           String?
  video_720p_mp4_3           String?
  video_720p_mp4_4           String?
  video_720p_1               String?
  video_720p_2               String?
  video_720p_3               String?
  video_720p_4               String?
  video_360p_mp4_1           String?
  video_360p_mp4_2           String?
  video_360p_mp4_3           String?
  video_360p_mp4_4           String?
  video_360p_1               String?
  video_360p_2               String?
  video_360p_3               String?
  video_360p_4               String?
  subtitles                  String?
  subtitle_tried             Int             @default(0)
  segments                   Json?
  content                    Content         @relation(fields: [contentId], references: [id])
  slides                     String?
  thumbnail_mosiac_url       String?
  duration                   Int?
  migration_status           MigrationStatus @default(NOT_MIGRATED)
  migration_pickup_time      DateTime?
  migrated_video_1080p_mp4_1 String?
  migrated_video_360p_mp4_1  String?
  migrated_video_720p_mp4_1  String?
  original_mp4_url           String?
  transcoded                 Boolean         @default(false)

  @@unique([contentId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  token             String?
  accounts          Account[]
  sessions          Session[]
  ipChangeLogs      IpChangeLog[]
  refreshTokens     RefreshToken[]
  githubLink        GitHubLink?
  upiIds            UpiId[]             @relation("UserUpiIds")
  solanaAddresses   SolanaAddress[]     @relation("UserSolanaAddresses")
  discordConnect    DiscordConnect?
  videoProgresses   VideoProgress[]
  bookmarks         Bookmark[]
  comments          Comment[]
  questions         Question[]
  answers           Answer[]
  votes             Vote[]
  purchases         UserPurchases[]
  certificates      Certificate[]
  refreshToken      String? @unique
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model IpChangeLog {
  id        String   @id @default(cuid())
  userId    String
  oldIp     String
  newIp     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model GitHubLink {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  githubId     String
  username     String
  avatarUrl    String?
  access_token String
  profileUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UpiId {
  id     Int    @id @default(autoincrement())
  value  String @db.VarChar(256)
  userId String
  user   User   @relation("UserUpiIds", fields: [userId], references: [id])

  @@unique([userId, value])
}

model SolanaAddress {
  id     Int    @id @default(autoincrement())
  value  String @db.Char(44)
  userId String
  user   User   @relation("UserSolanaAddresses", fields: [userId], references: [id])

  @@unique([userId, value])
}

model DiscordConnect {
  id        String @id @default(cuid())
  username  String
  discordId String @unique
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordConnectBulk {
  id        String @id @default(cuid())
  username  String
  discordId String
  userId    String
  cohortId  String @default("")
}

model VideoProgress {
  id               Int      @id @default(autoincrement())
  userId           String
  contentId        Int
  currentTimestamp Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content          Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  markAsCompleted  Boolean  @default(false)
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([contentId, userId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String
  contentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id           Int         @id @default(autoincrement())
  content      String
  commentType  CommentType @default(DEFAULT)
  approved     Boolean     @default(false)
  contentId    Int
  commentedOn  Content     @relation(fields: [contentId], references: [id])
  parentId     Int?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id])
  children     Comment[]   @relation("ParentComment")
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  upvotes      Int         @default(0)
  downvotes    Int         @default(0)
  repliesCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  votes        Vote[]
  isPinned     Boolean     @default(false)
}

model Question {
  id           Int      @id @default(autoincrement())
  title        String
  content      String
  slug         String   @unique
  createdAt    DateTime @default(now())
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  answers      Answer[]
  votes        Vote[]
  tags         String[]
  updatedAt    DateTime @updatedAt

  @@index([authorId])
}

model Answer {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  question     Question @relation(fields: [questionId], references: [id])
  questionId   Int
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  votes        Vote[]
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  parentId     Int?
  responses    Answer[] @relation("AnswerToAnswer")
  parent       Answer?  @relation("AnswerToAnswer", fields: [parentId], references: [id])
  updatedAt    DateTime @updatedAt

  @@index([questionId])
  @@index([authorId])
  @@index([parentId])
}

model Vote {
  id         Int       @id @default(autoincrement())
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])
  answerId   Int?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  commentId  Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  voteType   VoteType
  createdAt  DateTime  @default(now())

  @@unique([questionId, userId])
  @@unique([answerId, userId])
  @@unique([commentId, userId])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime
  videoLink String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PostType {
  QUESTION
  ANSWER
}

enum CommentType {
  INTRO
  DEFAULT
}

enum MigrationStatus {
  NOT_MIGRATED
  IN_PROGRESS
  MIGRATED
  MIGRATION_ERROR
}
